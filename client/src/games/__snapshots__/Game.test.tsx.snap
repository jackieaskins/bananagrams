// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Game /> renders properly 1`] = `
<DndProvider
  backend={[Function]}
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    justify="center"
    spacing={2}
    style={
      Object {
        "marginTop": "1px",
      }
    }
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
    >
      <WithStyles(ForwardRef(Typography))
        align="center"
        gutterBottom={true}
        variant="body2"
      >
        Your board and hand:
      </WithStyles(ForwardRef(Typography))>
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        spacing={1}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <Board
            board={
              Array [
                Array [
                  null,
                ],
              ]
            }
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <Hand
            hand={Array []}
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="column"
        spacing={1}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Typography))
            variant="body2"
          >
            Tiles remaining in bunch: 
            0
          </WithStyles(ForwardRef(Typography))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "width": "100%",
            }
          }
        >
          <PeelButton
            canPeel={false}
            handlePeel={[MockFunction handlePeel]}
            peelWinsGame={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "width": "100%",
            }
          }
        >
          <Dump />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <OpponentBoardPreview
            players={
              Array [
                Object {
                  "board": Array [
                    Array [
                      null,
                    ],
                  ],
                  "gamesWon": 0,
                  "hand": Array [],
                  "isAdmin": false,
                  "isReady": false,
                  "isTopBanana": false,
                  "userId": "id",
                  "username": "username",
                },
              ]
            }
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</DndProvider>
`;

exports[`<Game /> renders properly with more than one player 1`] = `
<DndProvider
  backend={[Function]}
>
  <WithStyles(ForwardRef(Grid))
    container={true}
    justify="center"
    spacing={2}
    style={
      Object {
        "marginTop": "1px",
      }
    }
  >
    <WithStyles(ForwardRef(Grid))
      item={true}
    >
      <WithStyles(ForwardRef(Typography))
        align="center"
        gutterBottom={true}
        variant="body2"
      >
        Your board and hand:
      </WithStyles(ForwardRef(Typography))>
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        spacing={1}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <Board
            board={
              Array [
                Array [
                  null,
                ],
              ]
            }
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <Hand
            hand={Array []}
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      item={true}
    >
      <WithStyles(ForwardRef(Grid))
        alignItems="center"
        container={true}
        direction="column"
        spacing={1}
      >
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Typography))
            variant="body2"
          >
            Tiles remaining in bunch: 
            0
          </WithStyles(ForwardRef(Typography))>
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "width": "100%",
            }
          }
        >
          <PeelButton
            canPeel={false}
            handlePeel={[MockFunction handlePeel]}
            peelWinsGame={true}
          />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
          style={
            Object {
              "width": "100%",
            }
          }
        >
          <Dump />
        </WithStyles(ForwardRef(Grid))>
        <WithStyles(ForwardRef(Grid))
          item={true}
        >
          <WithStyles(ForwardRef(Typography))
            align="center"
            variant="body2"
          >
            Opponent board(s):
          </WithStyles(ForwardRef(Typography))>
          <OpponentBoardPreview
            players={
              Array [
                Object {
                  "board": Array [
                    Array [
                      null,
                    ],
                  ],
                  "gamesWon": 0,
                  "hand": Array [],
                  "isAdmin": false,
                  "isReady": false,
                  "isTopBanana": false,
                  "userId": "id",
                  "username": "username",
                },
                Object {
                  "board": Array [
                    Array [
                      null,
                    ],
                  ],
                  "gamesWon": 0,
                  "hand": Array [],
                  "isAdmin": false,
                  "isReady": false,
                  "isTopBanana": false,
                  "userId": "other",
                  "username": "username",
                },
              ]
            }
          />
        </WithStyles(ForwardRef(Grid))>
      </WithStyles(ForwardRef(Grid))>
    </WithStyles(ForwardRef(Grid))>
  </WithStyles(ForwardRef(Grid))>
</DndProvider>
`;
